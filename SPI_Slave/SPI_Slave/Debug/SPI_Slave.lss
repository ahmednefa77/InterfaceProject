
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066e  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e7  00000000  00000000  0000083e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ae  00000000  00000000  00000e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000053  00000000  00000000  00001367  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000013ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Init>:

#include <util/delay.h>
#include <avr/io.h>

void SPI_Init(){
	SPCR=(1<<SPE);
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	8d b9       	out	0x0d, r24	; 13
	// Set MOSI, SCK as Output
	DDRB|=(1<<MISO);
  70:	be 9a       	sbi	0x17, 6	; 23
  72:	08 95       	ret

00000074 <SPI_Transfer>:
	
	 
}
unsigned char SPI_Transfer(unsigned char sendByte){
	
	 SPDR=sendByte;
  74:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));//if interrupt flag is not set loop(read
  76:	77 9b       	sbis	0x0e, 7	; 14
  78:	fe cf       	rjmp	.-4      	; 0x76 <SPI_Transfer+0x2>
 
	return SPDR;
  7a:	8f b1       	in	r24, 0x0f	; 15
}
  7c:	08 95       	ret

0000007e <main>:

int main(void)
{ 
	SPI_Init();
  7e:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Init>
	
	DDRC|=0b10000111;
  82:	84 b3       	in	r24, 0x14	; 20
  84:	87 68       	ori	r24, 0x87	; 135
  86:	84 bb       	out	0x14, r24	; 20
	unsigned char recvByte=SPI_Transfer('2');	
		
		switch (recvByte)
		{
			case '1':PORTC^=(1<<0);break;
			case '2':PORTC^=(1<<1);break;
  88:	12 e0       	ldi	r17, 0x02	; 2
			case '3':PORTC^=(1<<2);break;
  8a:	d4 e0       	ldi	r29, 0x04	; 4
    {
	unsigned char recvByte=SPI_Transfer('2');	
		
		switch (recvByte)
		{
			case '1':PORTC^=(1<<0);break;
  8c:	c1 e0       	ldi	r28, 0x01	; 1
	SPI_Init();
	
	DDRC|=0b10000111;
    while (1) 
    {
	unsigned char recvByte=SPI_Transfer('2');	
  8e:	82 e3       	ldi	r24, 0x32	; 50
  90:	0e 94 3a 00 	call	0x74	; 0x74 <SPI_Transfer>
		
		switch (recvByte)
  94:	82 33       	cpi	r24, 0x32	; 50
  96:	69 f0       	breq	.+26     	; 0xb2 <main+0x34>
  98:	18 f4       	brcc	.+6      	; 0xa0 <main+0x22>
  9a:	81 33       	cpi	r24, 0x31	; 49
  9c:	31 f0       	breq	.+12     	; 0xaa <main+0x2c>
  9e:	14 c0       	rjmp	.+40     	; 0xc8 <main+0x4a>
  a0:	83 33       	cpi	r24, 0x33	; 51
  a2:	59 f0       	breq	.+22     	; 0xba <main+0x3c>
  a4:	87 33       	cpi	r24, 0x37	; 55
  a6:	69 f0       	breq	.+26     	; 0xc2 <main+0x44>
  a8:	0f c0       	rjmp	.+30     	; 0xc8 <main+0x4a>
		{
			case '1':PORTC^=(1<<0);break;
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	8c 27       	eor	r24, r28
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	0b c0       	rjmp	.+22     	; 0xc8 <main+0x4a>
			case '2':PORTC^=(1<<1);break;
  b2:	85 b3       	in	r24, 0x15	; 21
  b4:	81 27       	eor	r24, r17
  b6:	85 bb       	out	0x15, r24	; 21
  b8:	07 c0       	rjmp	.+14     	; 0xc8 <main+0x4a>
			case '3':PORTC^=(1<<2);break;
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	8d 27       	eor	r24, r29
  be:	85 bb       	out	0x15, r24	; 21
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <main+0x4a>
			case '7':PORTC^=(1<<7);break;
  c2:	85 b3       	in	r24, 0x15	; 21
  c4:	80 58       	subi	r24, 0x80	; 128
  c6:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	81 ee       	ldi	r24, 0xE1	; 225
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x50>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x5a>
  d8:	00 00       	nop
  da:	d9 cf       	rjmp	.-78     	; 0x8e <main+0x10>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
