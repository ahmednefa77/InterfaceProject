
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ba  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000721  00000000  00000000  00000ada  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000365  00000000  00000000  000011fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001560  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039b  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011b  00000000  00000000  000019b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001ad2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define SS_ENABLE()		PORTC&=~(1<<CS)
#define SS_DISABLE()	PORTC|=(1<<CS)

int main(void)
{
    SPI_Init();
  6c:	0e 94 54 00 	call	0xa8	; 0xa8 <SPI_Init>
	uartInit();
  70:	0e 94 63 00 	call	0xc6	; 0xc6 <uartInit>
    while (1) 
    {
		 SS_ENABLE();
  74:	a8 98       	cbi	0x15, 0	; 21
		unsigned char data=uartReceive();
  76:	0e 94 6a 00 	call	0xd4	; 0xd4 <uartReceive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	2f ef       	ldi	r18, 0xFF	; 255
  7c:	36 e7       	ldi	r19, 0x76	; 118
  7e:	41 e0       	ldi	r20, 0x01	; 1
  80:	21 50       	subi	r18, 0x01	; 1
  82:	30 40       	sbci	r19, 0x00	; 0
  84:	40 40       	sbci	r20, 0x00	; 0
  86:	e1 f7       	brne	.-8      	; 0x80 <main+0x14>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0x1e>
  8a:	00 00       	nop
		 _delay_ms(30);
		 
		unsigned char recvByte=SPI_Transfer(data);
  8c:	99 27       	eor	r25, r25
  8e:	0e 94 5e 00 	call	0xbc	; 0xbc <SPI_Transfer>
		SS_DISABLE();
  92:	a8 9a       	sbi	0x15, 0	; 21
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	91 ee       	ldi	r25, 0xE1	; 225
  98:	24 e0       	ldi	r18, 0x04	; 4
  9a:	81 50       	subi	r24, 0x01	; 1
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	20 40       	sbci	r18, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x2e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x38>
  a4:	00 00       	nop
  a6:	e6 cf       	rjmp	.-52     	; 0x74 <main+0x8>

000000a8 <SPI_Init>:
#include <avr/io.h>
#include <avr/interrupt.h>

void SPI_Init(){
	//data direction for SPI bus Pins
	DDRB|=(1<<MOSI)|(1<<SCK);
  a8:	87 b3       	in	r24, 0x17	; 23
  aa:	80 6a       	ori	r24, 0xA0	; 160
  ac:	87 bb       	out	0x17, r24	; 23
	DDRC|=(1<<CS)|(1<<LED0);
  ae:	84 b3       	in	r24, 0x14	; 20
  b0:	85 60       	ori	r24, 0x05	; 5
  b2:	84 bb       	out	0x14, r24	; 20
	//MODE0-CPOL=0 CPHA=0 , SPE=1 , MSTR=1 DORD=MSB(0) , SPEED=FOSC/16=1Mhz
	SPCR|=(1<<MSTR)|(1<<SPE)|(1<<SPR0);
  b4:	8d b1       	in	r24, 0x0d	; 13
  b6:	81 65       	ori	r24, 0x51	; 81
  b8:	8d b9       	out	0x0d, r24	; 13
  ba:	08 95       	ret

000000bc <SPI_Transfer>:
	//sei();
}

unsigned char SPI_Transfer(unsigned char sendByte){
	//
	SPDR=sendByte;
  bc:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  be:	77 9b       	sbis	0x0e, 7	; 14
  c0:	fe cf       	rjmp	.-4      	; 0xbe <SPI_Transfer+0x2>
	return SPDR;
  c2:	8f b1       	in	r24, 0x0f	; 15
}
  c4:	08 95       	ret

000000c6 <uartInit>:
}

void uartSend(char data){
	
	while( !(UCSRA & (1<<UDRE)));
	UDR=data;
  c6:	87 e6       	ldi	r24, 0x67	; 103
  c8:	89 b9       	out	0x09, r24	; 9
  ca:	88 e1       	ldi	r24, 0x18	; 24
  cc:	8a b9       	out	0x0a, r24	; 10
  ce:	86 e8       	ldi	r24, 0x86	; 134
  d0:	80 bd       	out	0x20, r24	; 32
  d2:	08 95       	ret

000000d4 <uartReceive>:
}

unsigned char uartReceive(){
	while( !(UCSRA & (1<<RXC)));
  d4:	5f 9b       	sbis	0x0b, 7	; 11
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <uartReceive>
	return UDR;
  d8:	8c b1       	in	r24, 0x0c	; 12
}
  da:	08 95       	ret

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
